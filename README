FBX - Foobar for Linux

AUTHOR
  Christopher Han <xiphux@gmail.com>.  Please send bug reports, suggestions, and patches here.

INTRODUCTION
  FBX is a cross-platform audio player written in C++.  Its interface has been modeled after Foobar2000, a popular Windows music player.  It has an extensible architecture to allow support for audio file formats to be added very easily.  It uses a simple but intuitive tab-based playlist management system.

DEPEDENCIES
  In addition to a development environment on your Linux machine that includes gcc 4.0.0 or greater, autoconf, automake. m4, and libtool (the standard development tools included in most linux installs), you will need the following:

  Required dependencies:
    wxWidgets >= 2.8.0 - <http://www.wxwidgets.org> - cross-platform GUI widget library

  Audio output dependencies:
    Libao - <http://xiph.org/ao/> - for AudioAo audio output driver

  Audiofile input dependencies:
    Vorbisfile >= 1.0.0 - <http://xiph.org/vorbis/> - for AudiofileVorbis input driver

  Optional features:
    Libmagic - <ftp://ftp.astron.com/pub/file/> - for determining a file's type by its binary patterns

  Please note that no single audio output or audiofile input library is required, however, the program will fail to compile without at least one working audio output and one working audio input.

  Although source code exists for other audio drivers (namely the ALSA output driver and the Libmad and LibFLAC input drivers), they are in a buggy and incomplete state and are therefore not listed as supported.

  Installation of these various libraries varies from distribution to distribution and depends heavily on the package manager the distribution is using.  It is beyond the scope of this README to detail every possible distribution; please contact your system administrator.  You will need the library itself and, if your distribution separates out headers, the development package for that library (usually the package name suffixed with "-dev" or "-headers").

COMPILATION/INSTALLATION
  Compilation is a very straightforward GNU autoconf/automake compile.  Run the following three steps:

  ./configure
  make
  make install

  The configure script will check your system to ensure that all dependencies are present and intact, and that all libraries are greater than or equal to the required versions

  Please note that running "make install" will probably require root privileges if installing into a root-owned filesystem.

  The configure script has a number of commandline options that can be passed to enable or disable certain features:

  (every --enable-feature option has an equivalent --disable-feature option)

    --enable-debug      - enables debugging output
    --enable-alsa       - enables ALSA output (incomplete)
    --enable-ao         - enables libao output
    --enable-vorbis     - enables Ogg Vorbis input
    --enable-flac       - enables FLAC input (incomplete)
    --enable-magic      - enables use of libmagic to analyze file type
    --enable-auitoolbar - enables experimental draggable wxAUI toolbars (incomplete)

  Any audio input/output driver that is not incomplete will autodetect and enable itself if the prerequisite library is detected.  This can be disabled with the "--disable" flag for that particular driver.  Incomplete drivers have to be manually enabled, but are not guaranteed to work or even compile.

  After "make install", the executable should be installed into a binary directory accessible in the user's path, and the program should be executable by just running "fbx".

USAGE
  Upon first execution, the program starts with an empty playlist.  You may operate on the playlist using the options in the file menu.
  
  The five toolbar buttons are Stop, Pause, Play, Previous, and Next, respectively.  There are also equivalent menu options in the Playback menu.
  Beside those is the order setting.  This specifies what order the playlist will advance in.
    Default - Plays song after song straight down the list until the end of the file.
    Random - Plays songs in the playlist in random order infinitely.
    Repeat (playlist) - Plays all songs through the entire playlist one by one as in Default, but at the end, continues playback from the beginning of the playlist.
    Repeat (track) - Repeats the same single track over and over.
  There is also an order submenu which controls the same option.

  Beside the order setting is the seek bar.  It displays the current progress through the track, and is draggable to allow seeking through the song.

  Below that is the playlist tab window.  Playlist tabs can be tragged, and will display an asterisk in their name when the playlist has unsaved changes.  Each song is displayed as a line in the playlist, with a formatted metadata string if the song has metadata embedded in it, or just the filename if it has no readable metadata.  A song can be double-clicked to jump to or start playing that song.

  At the very bottom is the status line.  It displays information about the currently playing song, including information about the format, song progress and total length, the metadata info as displayed in the playlist, and the currently active playlist.

  There are also a number of keyboard accelerators to make certain tasks easier.  These are:
    Z          - Stop
    X          - Pause
    C          - Play
    Shift+V    - Previous
    V          - Next
    Del        - Remove selected track
    Shift+Up   - Move selected track up
    Shift+Down - Move selected track down

CONFIGURATION
  When the program is first run, it creates a configuration file in the user's home directory (~/.fbx/fbxrc).  This contains a number of simple key=value pairs.  Most of these should not be touched by the user, however, they are detailed here for reference.

  audio=[driver] - force a specific audio driver.  This should only be used if the default driver selected for your platform has issues.
  buffer=[size] - Adjust the audio buffer size.  The default buffer is set to 4.  However, certain cheap sound cards with latency issues have problems playing smooth audio with a buffer size this small.  This option allows the buffer size to be overridden.  Please note that increasing the buffer size decreases the responsiveness of the application.  Therefore, this value should be the smallest possible value large enough to provide smooth audio playback.  Should be set in powers of 2.
  order=[value] - Used to store the last set order setting, to be restored upon the next program run.  0 = Default, 1 = Random, 2 = Repeat (playlist), 3 = Repeat (track).
  playlists=[playlist1[,playlist2[,playlist3]]] - comma-delimited list of playlists to load upon startup.  The program saves its active playlists to this key upon shutdown, and reloads these playlists upon the next startup.

DOCUMENTATION
  A quick reference for the keyboard shortcuts, commandline options, and configuration options is available in the man pages ("man fbx").  API documentation is generated by doxygen and is available in html form in the source tarball, under doc/html.

TROUBLESHOOTING
  - A song is displaying with a time of (0:0-1)
  The path in the playlist is incorrect and it's not pointing to a legitimate readable audio file.

  - Audio is choppy
  Your buffer size is too low for your sound card.  Try increasing the buffer size in powers of 2 with the buffer=<size> config option (see previous section, "CONFIGURATION").

  - There are many messages during playback about ALSA xruns when using libao and ALSA
  See previous.

  - The GUI is unresponsive for several seconds when trying to perform an action like stopping or skipping to the next track
  Your buffer size is too high for your sound card.  Decrease the buffer size with the buffer=<size> option.  This will only occur if you manually override it and set it too high, the default value is small enough to respond with acceptable latency.  If you have not changed it and you still have this problem, your computer is probably extremely old and could use an upgrade.

  - Audio skips sometimes when there is heavy hard drive I/O
  The system streams the audio file from the hard disk and does not load/cache it into memory.  Therefore, if it is competing with a task for I/O and cannot read the audio data fast enough to stream it to the user, the audio will skip.  Future versions may cache a portion of the data; memory tradeoffs are still being evaluated.

  - The "Random" order option has repeated a couple songs on the playlist, and other songs haven't been played at all
  Although the random order has a basic intelligence in that it will record a 5-song history and attempt to avoid those tracks just played, it still is a pseudorandom number generated within the bounds of the computer; there are going to be collisions.  If you mean that all tracks should be played just once in random order, the feature you are looking for is "Shuffle", which hasn't been implemented yet.

  - I'm using the experimental draggable wxAUI toolbars and the "order" and "progress" toolbars don't display anything until I drag them somewhere
  I told you they were experimental and incomplete.

  - Why can't I just use Foobar2000 under WINE?
  No one's stopping you.  But not all of us like emulation.
